package cn.edu.ccnu.cs;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.regex.Matcher;//可能是正则表达式；需要了解一下；
import java.util.regex.Pattern;

/**
 * 统计英文单词数目和频次实验：从文本文件中读取英文句子，并统计所出现的英文单词及其出现的次数。
 * 知识点： 文件读取、正则表达式、集合
 * 补充完成程序，以实现相应的功能
 * 
 * @author ychang
 *
 */
public class wordcount {

	public static void main(String[] args) {
		// 定义变量和参数
		String srcFilename = "C:\\Users\\12074\\Desktop\\English.txt";
		Map<String, WordInfo> datas = new HashMap<String, WordInfo>();   //为什么没有直接定义Map<String,tf>?
																		//HashMap没有排序功能
																		//考虑可能是因为如果直接是tf的话，那么最终输出时
																		//这样就可以考虑通顺为什么又要定义一个数组列了；
		// 统计单词
		FileWordCount(srcFilename, datas);
		// 单词按频次降序排序                                                                                   //这里应该写什么？//正常的数组应该是数组元素个数
		List<WordInfo> words = new ArrayList<WordInfo>(datas.values());   //datas.values()
		// 补全程序： 按单词出现的频次tf对words进行排序
		words.sort((words1,words2)->{return words1.tf-words2.tf;});        //lambda表达式
		
		// 输出统计结果
		System.out.println("Word               Frequency");
		System.out.println("--------------------------------");
		for (WordInfo wi : words) {
			System.out.printf("%-16s   %5d\n", wi.word, wi.tf);
		}
	}
	
	/**
	 * 统计文本文件中出现的英文单词及其频次
	 * @param srcFilename   文件名
	 * @param datas         统计结果
	 */
	private static void FileWordCount(String srcFilename, Map<String, WordInfo> datas) {
		BufferedReader br = null;
		String line = null;
		
		try {
			Pattern p = Pattern.compile("\\b[a-zA-Z-]+\\b");     // 正则表达式  \b 表示单词边界
			br = new BufferedReader(new InputStreamReader(new FileInputStream(srcFilename), "UTF-8"));
			
			while ((line = br.readLine()) != null)
				count(line, datas, p);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try { br.close(); } catch (Exception e) {}
		}
	}

	/**
	 * 统计某一行的单词
	 * @param line      待统计文本
	 * @param datas     统计结果
	 * @param p         正则表达式
	 */
	private static void count(String line, Map<String, WordInfo> datas, Pattern p) {
		// 补全程序： 统计单词及其频次，并存储在datas中
		
       
        //通过模式对象创建对象
		Matcher m3 = p.matcher(line);
        //调用匹配器的功能
        //boolean b3 = m3.matches();
        //System.out.println(b3);//输出false
        System.out.println("============================");
    //========================================================================    
        //public String group()返回由以前匹配操作所匹配的输入子序列。
        //public boolean find()试查找与该模式匹配的输入序列的下一个子序列。
        
        
        //通过上面的几次提出，可以输出想要的结果，所以考虑用循环结构
        while(m3.find()){          //如果匹配成功，那么就检查map里有没 //如果find有自动迭代功能那么我就可以实现将一行中的单词全部记录
            if(datas.containsKey(m3.group()))
            {
            	
            //需要实现传入key,返回值wordinfo然后调用increase；
            datas.get(m3.group()).increaseTF();	
            }
            else {
            //写入单词，wordinfo();直接写一个对象
            	WordInfo wf=new WordInfo(m3.group());
            	datas.put(m3.group(),wf);
            	
            }
        }
    
    }


	
	/**
	 * 说明：内部类是类的一个特殊成员，即类的成员包括：成员变量、成员函数、成员类，所以，其修饰符也是类似的。
	 */
	private static class WordInfo {
		String word;
		int    tf;      // term frequency
		
		public WordInfo(String word) {
			this.word = word;
			tf = 1;
		}
		public void increaseTF() {
			tf ++;
		}
	}
}
